#!/bin/bash
set -e

# Define directory structure
SRC_DIR="src"
BUILD_DIR="build"
ASSEMBLY_DIR="$SRC_DIR/assembly"
C_DIR="$SRC_DIR/c"
CSHARP_DIR="$SRC_DIR/csharp"

# Create directories
mkdir -p $ASSEMBLY_DIR $C_DIR $CSHARP_DIR $BUILD_DIR

# Populate directories with example files
echo "Creating example files..."

# Assembly code
cat <<EOF > $ASSEMBLY_DIR/example.asm
global _start

section .data
    msg db 'Hello from Assembly!', 0x0A
    len equ \$ - msg

section .text
    _start:
        ; Write message to stdout
        mov rax, 1          ; syscall: write
        mov rdi, 1          ; file descriptor: stdout
        mov rsi, msg        ; pointer to message
        mov rdx, len        ; message length
        syscall

        ; Exit program
        mov rax, 60         ; syscall: exit
        xor rdi, rdi        ; exit code: 0
        syscall
EOF

# C code
cat <<EOF > $C_DIR/example.c
#include <stdio.h>

int main() {
    printf("Hello from C!\\n");
    return 0;
}
EOF

# C# code
cat <<EOF > $CSHARP_DIR/Program.cs
using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;

class Program
{
    static void Main()
    {
        string zipPath = Path.Combine(Path.GetTempPath(), "payload.zip");
        string extractPath = Path.Combine(Path.GetTempPath(), "payload");

        // Extract payload
        if (!Directory.Exists(extractPath))
        {
            Directory.CreateDirectory(extractPath);
        }

        using (var zipStream = new FileStream(zipPath, FileMode.Open, FileAccess.Read))
        {
            using (var archive = new ZipArchive(zipStream))
            {
                archive.ExtractToDirectory(extractPath);
            }
        }

        // Execute payload
        string payloadPath = Path.Combine(extractPath, "payload.exe");
        Process.Start(payloadPath);
    }
}
EOF

# Create .NET project file
cat <<EOF > $CSHARP_DIR/HelloWorld.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
  </PropertyGroup>

</Project>
EOF

# Compiling assembly code
echo "Compiling assembly code..."
nasm -f elf64 $ASSEMBLY_DIR/example.asm -o $BUILD_DIR/example.o

# Linking assembly objects
echo "Linking assembly objects..."
ld -o $BUILD_DIR/assembly_program $BUILD_DIR/example.o

# Compiling C code
echo "Compiling C code..."
gcc -c $C_DIR/example.c -o $BUILD_DIR/example.o

# Linking C objects
echo "Linking C objects..."
gcc -o $BUILD_DIR/c_program $BUILD_DIR/example.o

# Compiling C# code
echo "Compiling C# code..."
dotnet build $CSHARP_DIR/HelloWorld.csproj -o $BUILD_DIR

# Packaging example files into a zip
echo "Packaging..."
zip -r $BUILD_DIR/payload.zip $ASSEMBLY_DIR $C_DIR $CSHARP_DIR

# Creating the final dropper executable
echo "Creating final dropper executable..."
cat $BUILD_DIR/assembly_program $BUILD_DIR/c_program $BUILD_DIR/HelloWorld.dll > $BUILD_DIR/final_dropper

echo "Build and sorting completed."

