#include <iostream>
#include <fstream>
#include <vector>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <sys/mman.h>
#include <unistd.h>
#include <sys/ptrace.h>
#include <ctime>

#ifdef _WIN32
#include <windows.h>
#endif

enum class Instruction {
    PUSH,
    POP,
    ADD,
    SUB,
    MUL,
    DIV,
    XOR,
    MOV,
    JMP,
    JZ,
    HLT
};

class VM {
public:
    std::vector<uint8_t> memory;
    std::vector<uint8_t> stack;
    uint8_t ip; // Instruction pointer
    uint8_t sp; // Stack pointer

    VM() : ip(0), sp(0) {}

    void execute() {
        while (ip < memory.size()) {
            Instruction instr = static_cast<Instruction>(memory[ip]);
            switch (instr) {
                case Instruction::PUSH:
                    stack.push_back(memory[++ip]);
                    sp++;
                    break;
                case Instruction::POP:
                    stack.pop_back();
                    sp--;
                    break;
                case Instruction::ADD: {
                    uint8_t a = stack.back(); stack.pop_back(); sp--;
                    uint8_t b = stack.back(); stack.pop_back(); sp--;
                    stack.push_back(a + b); sp++;
                    break;
                }
                case Instruction::HLT:
                    return;
                default:
                    std::cerr << "Unknown instruction" << std::endl;
                    return;
            }
            ip++;
        }
    }
};

class MetamorphicEngine {
private:
    std::string inputFilePath;
    std::string outputFilePath;
    std::vector<uint8_t> fileData;

    void readFile();
    void writeFile();
    void performObfuscation();
    void applyCodeTransformation();
    void encryptCode();
    void decryptCode();
    void antiDebuggingCheck();
    void addStackSmashingProtection();
    void includeAntiReverseEngineeringTechniques();
    void insertNOPsleds();
    void insertROPchains();
    void duplicateStackFrames();
    void includeVMCode();
    void generateDynamicCode();
    void executeDynamicCode(const std::vector<uint8_t>& code);
    void polymorphicCodeGeneration();

public:
    MetamorphicEngine(const std::string& inputFile, const std::string& outputFile)
        : inputFilePath(inputFile), outputFilePath(outputFile) {}

    void obfuscate();
};

void MetamorphicEngine::readFile() {
    std::ifstream inputFile(inputFilePath, std::ios::binary);
    if (!inputFile) {
        std::cerr << "Unable to open input file: " << inputFilePath << std::endl;
        exit(1);
    }
    fileData = std::vector<uint8_t>((std::istreambuf_iterator<char>(inputFile)), std::istreambuf_iterator<char>());
    inputFile.close();
}

void MetamorphicEngine::writeFile() {
    std::ofstream outputFile(outputFilePath, std::ios::binary);
    if (!outputFile) {
        std::cerr << "Unable to open output file: " << outputFilePath << std::endl;
        exit(1);
    }
    outputFile.write(reinterpret_cast<char*>(fileData.data()), fileData.size());
    outputFile.close();
}

void MetamorphicEngine::performObfuscation() {
    applyCodeTransformation();
    encryptCode();
    decryptCode();
    addStackSmashingProtection();
    includeAntiReverseEngineeringTechniques();
    insertNOPsleds();
    insertROPchains();
    duplicateStackFrames();
    includeVMCode();
    polymorphicCodeGeneration();
}

void MetamorphicEngine::applyCodeTransformation() {
    for (size_t i = 0; i < fileData.size(); ++i) {
        fileData[i] ^= (0xAA + (i % 256));
    }
}

void MetamorphicEngine::encryptCode() {
    uint8_t key = 0xAA;
    for (size_t i = 0; i < fileData.size(); ++i) {
        fileData[i] ^= key;
    }
}

void MetamorphicEngine::decryptCode() {
    uint8_t key = 0xAA;
    for (size_t i = 0; i < fileData.size(); ++i) {
        fileData[i] ^= key;
    }
}

void MetamorphicEngine::antiDebuggingCheck() {
#ifdef _WIN32
    if (IsDebuggerPresent()) {
        std::cerr << "Debugger detected!" << std::endl;
        exit(1);
    }
#else
    if (ptrace(PTRACE_TRACEME, 0, nullptr, nullptr) == -1) {
        std::cerr << "Debugger detected!" << std::endl;
        exit(1);
    }
    ptrace(PTRACE_DETACH, 0, nullptr, nullptr);
#endif
}

void MetamorphicEngine::addStackSmashingProtection() {
    std::vector<uint8_t> stackGuardCode = {
        0x48, 0x83, 0xEC, 0x28,
        0x48, 0x8D, 0x3D, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xF7,
        0x48, 0x83, 0xC4, 0x28,
        0xC3
    };
    fileData.insert(fileData.end(), stackGuardCode.begin(), stackGuardCode.end());
}

void MetamorphicEngine::includeAntiReverseEngineeringTechniques() {
    std::vector<uint8_t> antiReverseCode = {
        0x90, 0x90, 0x90, 0x90,
        0xE8, 0x00, 0x00, 0x00, 0x00,
        0x90, 0x90, 0x90, 0x90
    };
    fileData.insert(fileData.end(), antiReverseCode.begin(), antiReverseCode.end());
}

void MetamorphicEngine::insertNOPsleds() {
    size_t offset = 0;
    while (offset < fileData.size()) {
        fileData.insert(fileData.begin() + offset, 10, 0x90);
        offset += 20;
    }
}

void MetamorphicEngine::insertROPchains() {
    std::vector<uint8_t> ropChain = {
        0x58, 0x59, 0x5A, 0x5B,
        0x5C, 0x5D, 0x5E, 0x5F
    };
    fileData.insert(fileData.end(), ropChain.begin(), ropChain.end());
}

void MetamorphicEngine::duplicateStackFrames() {
    std::vector<uint8_t> stackDupCode = {
        0x50, 0x51, 0x52, 0x53,
        0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5A, 0x5B,
        0x5C, 0x5D, 0x5E, 0x5F
    };
    fileData.insert(fileData.end(), stackDupCode.begin(), stackDupCode.end());
}

void MetamorphicEngine::includeVMCode() {
    VM vm;
    vm.memory = {
        static_cast<uint8_t>(Instruction::PUSH), 5,
        static_cast<uint8_t>(Instruction::PUSH), 10,
        static_cast<uint8_t>(Instruction::ADD),
        static_cast<uint8_t>(Instruction::HLT)
    };
    vm.execute();
}

void MetamorphicEngine::generateDynamicCode() {
    std::vector<uint8_t> dynamicCode = {
        0x48, 0x89, 0xE5,
        0x48, 0x83, 0xEC, 0x20,
        0xB8, 0x01, 0x00, 0x00, 0x00,
        0xC9,
        0xC3
    };
    executeDynamicCode(dynamicCode);
}

void MetamorphicEngine::executeDynamicCode(const std::vector<uint8_t>& code) {
    size_t codeSize = code.size();
    void* mem = mmap(nullptr, codeSize, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    if (mem == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }
    std::memcpy(mem, code.data(), codeSize);
    typedef void (*func_t)();
    func_t func = reinterpret_cast<func_t>(mem);
    func();
    munmap(mem, codeSize);
}

void MetamorphicEngine::polymorphicCodeGeneration() {
    std::vector<uint8_t> polyCode = {
        0x55,                    // push rbp
        0x48, 0x89, 0xE5,        // mov rbp, rsp
        0x48, 0x83, 0xEC, 0x20,  // sub rsp, 0x20
        0xB8, 0x01, 0x00, 0x00, 0x00, // mov eax, 1
        0xC9,                    // leave
        0xC3                     // ret
    };
    std::srand(std::time(nullptr));
    size_t randOffset = std::rand() % (fileData.size() - polyCode.size());
    fileData.insert(fileData.begin() + randOffset, polyCode.begin(), polyCode.end());
}

void MetamorphicEngine::obfuscate() {
    antiDebuggingCheck();
    readFile();
    performObfuscation();
    writeFile();
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " <input file> <output file>" << std::endl;
        return 1;
    }
    MetamorphicEngine engine(argv[1], argv[2]);
    engine.obfuscate();
    return 0;
}

