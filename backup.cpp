#include <QApplication>
#include <QMainWindow>
#include <QWebEngineView>
#include <QLabel>
#include <QPushButton>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QTextEdit>
#include <QLineEdit>
#include <QCheckBox>
#include <QFileDialog>
#include <QMessageBox>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QJsonValue>
#include <QJsonObject>
#include <QUrl>
#include <QUrlQuery>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QNetworkAccessManager>
#include <QNetworkDiskCache>
#include <QTimer>

#include <iostream>

class LlamaGUI : public QMainWindow {
    Q_OBJECT

public:
    LlamaGUI(QWidget *parent = nullptr);
    ~LlamaGUI();

private slots:
    void on_button_clicked();
    void on_checkbox_toggled(bool checked);
    void on_file_dialog_accepted(const QString &path);
    void on_text_changed(const QString &text);
    void on_web_view_loaded(const QString &url);
    void on_web_view_error(const QString &error);

private:
    void initUI();
    void connectSignals();
    void disconnectSignals();
    void loadSettings();
    void saveSettings();
    void clearOutput();
    void displayOutput();
    void sendRequest(const QString &input_text);
    void displayError(const QString &error);
    void displayWarning(const QString &warning);

    QWebEngineView *web_view_;
    QLabel *label_;
    QLineEdit *input_text_;
    QPushButton *button_;
    QCheckBox *checkbox_;
    QFileDialog *file_dialog_;
    QTextEdit *output_text_;
    QVBoxLayout *main_layout_;
    QHBoxLayout *input_layout_;
    QHBoxLayout *button_layout_;
    QHBoxLayout *checkbox_layout_;
    QNetworkAccessManager *network_manager_;
    QNetworkDiskCache *network_cache_;
    QTimer *timer_;
};

LlamaGUI::LlamaGUI(QWidget *parent) : QMainWindow(parent) {
    initUI();
    connectSignals();
}

LlamaGUI::~LlamaGUI() {
    disconnectSignals();
    saveSettings();
}

void LlamaGUI::initUI() {
    setWindowTitle("LLMA");
    resize(800, 600);

    main_layout_ = new QVBoxLayout;
    setCentralWidget(new QWidget);
    centralWidget()->setLayout(main_layout_);

    input_layout_ = new QHBoxLayout;
    main_layout_->addLayout(input_layout_);
    input_text_ = new QLineEdit;
    input_layout_->addWidget(input_text_);
    button_layout_ = new QHBoxLayout;
    main_layout_->addLayout(button_layout_);
    button_ = new QPushButton("Send");
    button_->setObjectName("send-button");
    button_layout_->addWidget(button_);
    checkbox_layout_ = new QHBoxLayout;
    main_layout_->addLayout(checkbox_layout_);
    checkbox_ = new QCheckBox("Check");
    checkbox_->setChecked(true);
    checkbox_layout_->addWidget(checkbox_);
    checkbox_->setObjectName("checkbox");

    web_view_ = new QWebEngineView;
    main_layout_->addWidget(web_view_);
    label_ = new QLabel;
    main_layout_->addWidget(label_);
    output_text_ = new QTextEdit;
    main_layout_->addWidget(output_text_);

    file_dialog_ = new QFileDialog;
    file_dialog_->setFileMode(QFileDialog::ExistingFile);
    file_dialog_->setObjectName("file-dialog");

    network_manager_ = new QNetworkAccessManager;
    network_cache_ = new QNetworkDiskCache;

    timer_ = new QTimer;
}

void LlamaGUI::connectSignals() {
    connect(button_, &QPushButton::clicked, this, &LlamaGUI::on_button_clicked);
    connect(checkbox_, &QCheckBox::toggled, this, &LlamaGUI::on_checkbox_toggled);
    connect(file_dialog_, &QFileDialog::accepted, this, &LlamaGUI::on_file_dialog_accepted);
    connect(input_text_, &QLineEdit::textChanged, this, &LlamaGUI::on_text_changed);
    connect(web_view_, &QWebEngineView::loadFinished, this, &LlamaGUI::on_web_view_loaded);
    connect(web_view_, &QWebEngineView::loadError, this, &LlamaGUI::on_web_view_error);
}

void LlamaGUI::disconnectSignals() {
    disconnect(button_, &QPushButton::clicked, this, &LlamaGUI::on_button_clicked);
    disconnect(checkbox_, &QCheckBox::toggled, this, &LlamaGUI::on_checkbox_toggled);
    disconnect(file_dialog_, &QFileDialog::accepted, this, &LlamaGUI::on_file_dialog_accepted);
    disconnect(input_text_, &QLineEdit::textChanged, this, &LlamaGUI::on_text_changed);
    disconnect(web_view_, &QWebEngineView::loadFinished, this, &LlamaGUI::on_web_view_loaded);
    disconnect(web_view_, &QWebEngineView::loadError, this, &LlamaGUI::on_web_view_error);
}

void LlamaGUI::loadSettings() {
    // Load settings from file
}

void LlamaGUI::saveSettings() {
    // Save settings to file
}

void LlamaGUI::clearOutput() {
    output_text_->clear();
}

void LlamaGUI::displayOutput() {
    output_text_->setText("Output:");
}

void LlamaGUI::sendRequest(const QString &input_text) {
    QNetworkRequest request;
    request.setUrl(QUrl("http://localhost:5000"));
    request.setRawHeader("Content-Type", "application/json");
    QNetworkReply *reply = network_manager_->post(request, input_text.toUtf8());
    connect(reply, &QNetworkReply::finished, this, &LlamaGUI::on_reply_finished);
}

void LlamaGUI::displayError(const QString &error) {
    QMessageBox::critical(this, "Error", error);
}

void LlamaGUI::displayWarning(const QString &warning) {
    QMessageBox::warning(this, "Warning", warning);
}

void LlamaGUI::on_button_clicked() {
    sendRequest(input_text_->text());
}

void LlamaGUI::on_checkbox_toggled(bool checked) {
    if (checked) {
        displayOutput();
    } else {
        clearOutput();
    }
}

void LlamaGUI::on_file_dialog_accepted(const QString &path) {
    displayOutput();
}

void LlamaGUI::on_text_changed(const QString &text) {
    displayOutput();
}

void LlamaGUI::on_web_view_loaded(const QString &url) {
    displayOutput();
}

void LlamaGUI::on_web_view_error(const QString &error) {
    displayError(error);
}

void LlamaGUI::on_reply_finished() {
    QNetworkReply *reply = qobject_cast<QNetworkReply*>(sender());
    if (reply) {
        QString output = reply->readAll();
        displayOutput();
    }
}

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);
    LlamaGUI gui;
    gui.show();
    return app.exec();
}

