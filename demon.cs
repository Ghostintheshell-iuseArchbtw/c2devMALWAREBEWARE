using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        // Sample C# code to be compiled and executed
        string code = @"
        using System;
        public class Program
        {
            public static void Main()
            {
                Console.WriteLine(""Hello from dynamically compiled and executed code!"");
                // Add more dynamic logic here
            }
        }";

        Console.WriteLine("Compiling and executing dynamic code...");
        try
        {
            // Compile and execute the code
            CompileAndExecuteCode(code);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    static void CompileAndExecuteCode(string code)
    {
        // Create a syntax tree from the code
        SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(code);

        // Create a compilation
        CSharpCompilation compilation = CSharpCompilation.Create(
            "DynamicAssembly",
            new[] { syntaxTree },
            new[]
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(Console).Assembly.Location)
            },
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));

        using (MemoryStream ms = new MemoryStream())
        {
            // Emit the compilation to a memory stream
            EmitResult result = compilation.Emit(ms);

            if (!result.Success)
            {
                foreach (Diagnostic diagnostic in result.Diagnostics)
                {
                    if (diagnostic.IsWarningAsError || diagnostic.Severity == DiagnosticSeverity.Error)
                    {
                        Console.WriteLine($"{diagnostic.Id}: {diagnostic.GetMessage()}");
                    }
                }
                throw new InvalidOperationException("Compilation failed.");
            }

            // Load the compiled assembly from the memory stream
            ms.Seek(0, SeekOrigin.Begin);
            Assembly assembly = Assembly.Load(ms.ToArray());

            // Find the entry point (Main method)
            MethodInfo entryPoint = assembly.EntryPoint;
            if (entryPoint != null)
            {
                Console.WriteLine($"Executing the entry point {entryPoint.DeclaringType.FullName}.{entryPoint.Name}...");
                entryPoint.Invoke(null, null);
            }
            else
            {
                Console.WriteLine("No entry point found in the compiled assembly.");
            }
        }
    }
}
