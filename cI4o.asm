ORG 0x7C00

; SECTION 32-bit
; Define offsets for data decryption and messages
CS_IP_OFFSET DD 0x0000 ; Offset to save CS:IP
DECRYPT_DATA DD 0xAA55 ; Encryption key for demonstration

; Define messages
Message DB 'Critical system files and FAT partitions are being corrupted. Your system will become unusable.', 0
Corrupted DB 'This system is now permanently damaged. Contact your system administrator.', 0

; Copy CS:IP registers into variables
MOV EAX, CS
MOV [CS_IP_OFFSET], EAX
MOV EAX, EIP
MOV [CS_IP_OFFSET+4], EAX

; Jump to decryption code
JMP DecryptCode

; Decryption code
DecryptCode:
    ; Decrypt the data in memory
    MOV SI, CS_IP_OFFSET
    MOV DI, CS_IP_OFFSET
    MOV ECX, 0x2000 ; Length of the data to decrypt (example)
    XOR EAX, EAX
    REP MOVSD

; Set the new CS:IP
MOV EAX, [CS_IP_OFFSET]
MOV CS, AX
MOV EAX, [CS_IP_OFFSET+4]
MOV EIP, EAX

; Attempt to display a warning message
MOV EAX, 0x0E ; Function to write to standard output
MOV AL, 'C'   ; Character to display (just for example)
INT 0x10      ; BIOS interrupt to write character

; Avoid actual destructive operations for safety
; Commenting out destructive actions

; Fill remaining bytes with zeros
Times 510 - ($ - $$) DB 0

; Jump to 64-bit code
JMP 64bit_entry

BITS 64
SECTION .text
global _start

_start:
    ; Set up the necessary data and code structures for 64-bit mode
    ; Transition to 64-bit mode
    mov rax, qword CS_IP_OFFSET
    mov rdi, 0x0000000000000000 ; 0 is the 64-bit code segment in real mode
    lgdt [rdi] ; Load the GDT (Global Descriptor Table) with the new code segment

    ; Set the 64-bit code segment
    mov ax, 0x0000 ; 0x0000 is the 64-bit code segment in real mode
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax

    ; Jump to 64-bit mode
    jmp 64bit_code

64bit_code:
    ; Define offsets for data decryption and messages
    CS_IP_OFFSET64: RESQ 1 ; Offset to save CS:IP in 64-bit mode

    ; Copy CS:IP registers into variables
    MOV RAX, CS
    MOV [CS_IP_OFFSET64], RAX
    MOV RAX, RSP
    MOV [CS_IP_OFFSET64+8], RAX

    ; Attempt to display a warning message
    MOV RAX, 0x0E ; Function to write to standard output
    MOV AL, 'C'   ; Character to display (just for example)
    INT 0x60      ; BIOS interrupt to write character

    ; Avoid actual destructive operations for safety
    ; Commenting out destructive actions

    ; Display messages
    MOV RAX, 0x0E ; Function to write to standard output
    LEA RDX, Message ; Pointer to the message
    MOV RCX, 0x0048 ; Length of the message
    INT 0x60 ; BIOS interrupt to write message

    LEA RDX, Corrupted ; Pointer to the corrupted message
    MOV RCX, 0x0052 ; Length of the corrupted message
    INT 0x60 ; BIOS interrupt to write message

    ; For demonstration purposes, we can just end the program here
    xor rax, rax
    hlt

; Fill remaining bytes with zeros
Times 510 - ($ - $$) DB 0

