int main() {
    try {
        std::vector<unsigned char> aes_key(32);
        if (RAND_bytes(aes_key.data(), aes_key.size()) != 1) {
            throw std::runtime_error("Error generating random AES key.");
        }

        RSA* rsa_key_pair = generate_rsa_key_pair();
        RSA* rsa_public_key = RSAPublicKey_dup(rsa_key_pair);
        RSA* rsa_private_key = RSAPrivateKey_dup(rsa_key_pair);

        std::vector<unsigned char> iv(AES_BLOCK_SIZE);
        if (RAND_bytes(iv.data(), iv.size()) != 1) {
            throw std::runtime_error("Error generating random IV.");
        }

        PayloadObfuscatorPacker obfuscator(aes_key, rsa_public_key, rsa_private_key);

        std::string payload = "This is a highly sensitive and secret payload!";
        std::cout << "Original Payload: " << payload << std::endl;

        std::string obfuscated_payload = obfuscator.obfuscate(payload);
        std::cout << "Obfuscated Payload: " << obfuscated_payload << std::endl;

        std::string deobfuscated_payload = obfuscator.deobfuscate(obfuscated_payload);
        std::cout << "Deobfuscated Payload: " << deobfuscated_payload << std::endl;

        RSA_free(rsa_key_pair);
        RSA_free(rsa_public_key);
        RSA_free(rsa_private_key);
    } catch (const std::exception& e) {
        std::cerr << "An error occurred: " << e.what() << std::endl;
    }

    return 0;
}

